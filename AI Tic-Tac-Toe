import math

def print_board(board):
    for row in board:
        print('| ' + ' | '.join(row) + ' |')

def check_winner(board, player):
    # Check rows, columns, and diagonals for a win
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or \
           all(board[j][i] == player for j in range(3)):
            return True
    return (board[0][0] == board[1][1] == board[2][2] == player) or \
           (board[0][2] == board[1][1] == board[2][0] == player)

def get_available_moves(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == ' ']

def make_move(board, move, player):
    board[move[0]][move[1]] = player

def minimax(board, depth, is_maximizing):
    if check_winner(board, 'O'):
        return 1
    elif check_winner(board, 'X'):
        return -1
    elif not get_available_moves(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for move in get_available_moves(board):
            make_move(board, move, 'O')
            score = minimax(board, depth + 1, False)
            make_move(board, move, ' ')
            best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for move in get_available_moves(board):
            make_move(board, move, 'X')
            score = minimax(board, depth + 1, True)
            make_move(board, move, ' ')
            best_score = min(score, best_score)
        return best_score

def get_best_move(board):
    best_score = -math.inf
    best_move = None
    for move in get_available_moves(board):
        make_move(board, move, 'O')
        score = minimax(board, 0, False)
        make_move(board, move, ' ')
        if score > best_score:
            best_score = score
            best_move = move
    return best_move

def play():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    print("Welcome to Tic-Tac-Toe!")
    print("To make a move, enter a number from 0-8 corresponding to the position on the board.")
    print_board(board)

    while get_available_moves(board):
        human_move = None
        while human_move not in get_available_moves(board):
            try:
                move = int(input("Enter your move (0-8): "))
                human_move = (move // 3, move % 3)
                if board[human_move[0]][human_move[1]] != ' ':
                    print("Invalid move! Try again.")
                    human_move = None
            except ValueError:
                print("Invalid input! Please enter a number.")
        
        make_move(board, human_move, 'X')
        print_board(board)
        if check_winner(board, 'X'):
            print("You win!")
            return
        
        if not get_available_moves(board):
            break

        print("Computer's turn:")
        computer_move = get_best_move(board)
        make_move(board, computer_move, 'O')
        print_board(board)
        if check_winner(board, 'O'):
            print("Computer wins!")
            return

    print("It's a tie!")

if __name__ == "__main__":
    play()
